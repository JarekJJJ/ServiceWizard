@using ServiceWizard.Client.Brokers.API
@using ServiceWizard.Client.Service.Clients
@using ServiceWizard.Shared.Clients.Commands.CreateClient
@using ServiceWizard.Shared.Clients.Queries.GetAllClients
@using ServiceWizard.Shared.Tasks.Commands
@inject IClientsService clientsService;

<h3>EditClientComponent</h3>
@if(addClient != null)
{
<EditForm Model="@addClient" OnSubmit="OnSubmitMethodAsync">
    <DataAnnotationsValidator />
    <section class="card bg-body-tertiary border-transparent card-line mb-5" id="general">
        <div class="card-body">
            <h2 class="fs-5 mb-1">Nowy klient:</h2>
            <p class="text-body-secondary">Dodaj informacje na temat nowego klienta:</p>
            <div class="input-group mb-3">
                <label for="FirstName" class="input-group-text bg-secondary text-light"><i class="bi bi-person"></i>Imię oraz Nazwisko <span class=""></span> </label>
                <InputText id="FirstName" @bind-Value="addClient.FirstName" class="form-control bg-body"></InputText>
                <InputText id="LastName" @bind-Value="addClient.LastName" class="form-control bg-body"></InputText>
            </div>
            <ValidationMessage For="()=>addClient.FirstName" /> <ValidationMessage For="()=>addClient.LastName" />
            <div class="input-group mb-3">
                <label for="Address" class="input-group-text bg-secondary text-light">Adres(ulica , nr) </label>  <ValidationMessage For="()=>addClient.Address" />
                <InputText id="Address" @bind-Value="addClient.Address" class="form-control"></InputText>
            </div>
            <ValidationMessage For="()=>addClient.Address" />
            <div class="input-group mb-3">
                <label for="ZipAndCity" class="input-group-text bg-secondary text-light">Kod pocztowy, Miasto </label>
                <InputText id="Zip" @bind-Value="addClient.Zip" placeholder="XX-XXX" class="form-control"></InputText>
                <InputText id="City" @bind-Value="addClient.City" placeholder="Miejscowość" class="form-control"></InputText>
            </div>
            <ValidationMessage For="()=>addClient.Zip" /> <ValidationMessage For="()=>addClient.City" />
            <div class="input-group mb-3">
                <label for="Phone" class="input-group-text bg-secondary text-light">Telefony: </label>
                <InputText id="Phone1" @bind-Value="addClient.Phone1" placeholder="Telefon 1" class="form-control"></InputText>
                <InputText id="Phone2" @bind-Value="addClient.Phone2" placeholder="Telefon 2" class="form-control"></InputText>
            </div>
            <ValidationMessage For="()=>addClient.Phone1" /> <ValidationMessage For="()=>addClient.Phone2" />
            <div class="input-group mb-3">
                <label for="Email" class="input-group-text bg-secondary text-light">Email </label>  <ValidationMessage For="()=>addClient.Email" />
                <InputText id="Email" @bind-Value="addClient.Email" placeholder="email" class="form-control"></InputText>

            </div>

            <div class="mb-3">
                <hr class="text-light ps-3 pe-3" />
                <label for="Description" class="form-label">Opis</label>
                <div class="form-text" id="labelForDescription">Tutaj możemy dodać dodatkowe informacje o kliencie np. nie dzwonić przed 15:00</div>
                <InputTextArea id="Description" @bind-Value="addClient.Description" class="form-control" rows="4"></InputTextArea>
            </div>

            <ValidationMessage For="()=>addClient.Description" />
            <div class="input-group mb-3">
                <button type="submit" class="btn btn-primary">Zapisz</button>
            </div>
        </div>
    </section>
</EditForm>
}
else
{
    <div class="spinner-border text-info" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
    <div>
        <span>Ładowanie danych...</span>
    </div>
}

@code {
    [Parameter]
    public int clientId { get; set; }
    [Parameter]
    public EventCallback<bool> OnClientUpdated { get; set; }
    [Parameter]
    public int ReloadTrigger { get; set; }
    public ClientForListVm addClient { get; set; } 
    //public ClientForListVm GetClientForListVm { get; set; }
    private bool addClientOk = false;
    protected override async Task OnParametersSetAsync()
    {
        await LoadData();
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadData();

    }
    private async Task LoadData()
    {
        addClient = null;
        addClient = await clientsService.GetClientViewAsync(clientId);
      
    }
    private async Task OnSubmitMethodAsync(EditContext editContext)
    {
        if (editContext.Validate())
        {
            Console.WriteLine("Yeah zwalidowano i wysłano!");
            var task =  clientsService.EditClientAsync(clientId, addClient);
            await task;
            if (task.IsCompletedSuccessfully)
            {
                addClientOk = true;
                await OnClientUpdated.InvokeAsync(true);


            await LoadData();

            }
            else
            {
                Console.WriteLine("Nie udało się dodać klienta");
            }

        }
        else
        {
            Console.WriteLine("Dupa nie poszło");
        }
    }

}
