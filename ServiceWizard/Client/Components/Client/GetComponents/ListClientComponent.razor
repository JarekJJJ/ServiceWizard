@using ServiceWizard.Client.Components.Client.EditComponents
@using ServiceWizard.Client.Service.Clients
@using ServiceWizard.Shared.Clients.Queries.GetAllClients
@using Microsoft.AspNetCore.Components.Web.Virtualization
@inject IClientsService clientsService;
<MudText Typo="Typo.h3">Lista klientów</MudText>
<MudTable Items="listClients" Height="600px" Breakpoint="Breakpoint.Sm" Virtualize="true" ItemSize="30" FixedHeader="true">
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh>Imię i Nazwisko</MudTh>
        <MudTh>dane teleadresowe</MudTh>
        <MudTh>Ostatnie naprawy</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Akcje</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Id</MudTd>
        <MudTd>
            <a>
                <span class="fw-bold">@context.FirstName @context.LastName </span>
            </a>
            <br />
            <small>
                Dodano: @context.Created.ToString("dd/MM/yyyy")
            </small>
        </MudTd>
        <MudTd>
            <ul class="ml-4 mb-0 fa-ul text-muted">
                <li class="small"><span class="fa-li"><i class="bi bi-building"></i></span> Adres:@context.Address, @context.Zip @context.City</li>
                <li class="small"><span class="fa-li"><i class="bi bi-phone"></i></span> Tel1: @context.Phone1 Tel2: @context.Phone2 </li>
                <li class="small"><span class="fa-li"><i class="bi bi-envelope"></i></span> Email: @context.Email</li>
            </ul>
        </MudTd>
        <MudTd class="">
            <p></p>
        </MudTd>
        <MudTd class="">
            <MudChip T="string" Color="@(context.StatusId == 1 ? Color.Success : Color.Error)">
                @(context.StatusId == 1 ? "aktywny" : "nieaktywny")</MudChip>        
        </MudTd>
        <MudTd class="project-actions text-right">
           @*  <a class="btn btn-primary btn-sm" href="#">
                <i class="fas fa-folder">
                </i>
                View
            </a>
            <a class="btn btn-info btn-sm" role="button" @onclick="()=>EditClient(context.Id)">
                <i class="fas fa-pencil-alt">
                </i>
                Edit
            </a>
            <a class="btn btn-danger btn-sm" href="#">
                <i class="fas fa-trash">
                </i>
                Delete
            </a> *@
        </MudTd>
        </RowTemplate>
        <LoadingContent>
            <tr>
                <td colspan="6" class="text-center">
                    <div class="spinner-border text-info" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div>
                        <span>Ładowanie danych...</span>
                    </div>
                </td>
            </tr>
            </LoadingContent>
</MudTable>
           
       
@if (editClientView)
{
    <EditClientComponent clientId="@clientId" OnClientUpdated="HandleClientUpdated" ReloadTrigger="@reloadTrigger" />
}


@code {

    public List<ClientForListVm> listClients { get; set; }
    public ListClientForListVm resultApiListClient { get; set; } = new ListClientForListVm();
    public int curentPage { get; set; } = 1;
    public int totalClients { get; set; }
    private int pageSize  = 20;
    private string searchString = string.Empty;
    private int totalPages;
    private bool editClientView = false;
    private int clientId;
    private int reloadTrigger = 0;


    protected override async Task OnInitializedAsync()
    {

        await LoadClients();
    }
    protected async Task LoadClients()
    {
        var resultApiListClient = await clientsService.GetAllClientsAsync(curentPage, pageSize);
        listClients = resultApiListClient.ListClients;
        totalClients = resultApiListClient.TotalClients;
        totalPages = (int)Math.Ceiling(totalClients / (double)pageSize);
    }
     private async Task HandleClientUpdated(bool isUpdated)
    {
        if (isUpdated)
        {
         await LoadClients();
        StateHasChanged();
        }
    }

    protected async Task SearchResult(string searchString)
    {
        if (!String.IsNullOrEmpty(searchString))
        {
            listClients = await clientsService.GetBySearchStringAsync(searchString);
            StateHasChanged();
        }
        else
        {
            await LoadClients();
            StateHasChanged();
        }
    }

    private async Task PageSizeChanged(ChangeEventArgs e)
    {
        pageSize = int.Parse(e.Value.ToString());
        if (pageSize == 0)
        {
            pageSize = 10;
        }
        curentPage = 1;
        await LoadClients();
        StateHasChanged();
    }
    private async Task PageChanged(int page)
    {
        if(page < 1)
        {
            page = 1;
        }
        if(page > totalPages)
        {
            page = totalPages;
        }
        curentPage = page;

        await LoadClients();
        StateHasChanged();
    }
    private async Task EditClient(int id)
    {
       clientId = id;
       StateHasChanged();
       editClientView = true;
    }
    private void ReloadComponent()
    {
        reloadTrigger++; // Zmieniamy wartość, aby wymusić przeładowanie
    }
}

